using SdkLang;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using net.r_eg.Conari;
using SdkLang.Utils;

namespace SdkLang.Langs
{
    public class BasicHeader : IncludeFile
    {
        public override string FileName() => "Basic.h";
        public List<string> Pragmas() => new List<string>() { "warning(disable: 4267)" };
        public List<string> Include() => new List<string>() { "<vector>", "<locale>", "<set>" };

        public override void Init(UtfLang targetLang)
        {
            var lang = (UftCpp)targetLang;

            // Read File
            var fileStr = ReadThisFile(Main.IncludePath);

            // Replace Main stuff
            fileStr.Replace("/*!!INCLUDE_PLACEHOLDER!!*/", lang.GetFileHeader(Pragmas(), Include(), true));
            fileStr.Replace("/*!!FOOTER_PLACEHOLDER!!*/", lang.GetFileFooter());

            var jStruct = UtilsFunctions.GetStruct("FUObjectItem");
            string fUObjectItemStr = string.Empty;

            // Replace Major Stuff
            foreach (var mem in jStruct.Members)
            {
                fUObjectItemStr += mem.Type.All(char.IsDigit)
                    ? $"\tunsigned char {mem.Name} [{mem.Type}];\n"
                    : $"\t{mem.Type} {mem.Name};\n";
            }

            fileStr.Replace("/*!!DEFINE_PLACEHOLDER!!*/", Main.GenInfo.IsGObjectsChunks ? "#define GOBJECTS_CHUNKS" : "");
            fileStr.Replace("/*!!POINTER_SIZE_PLACEHOLDER!!*/", Main.GenInfo.PointerSize.ToString());
            fileStr.Replace("/*!!FUObjectItem_MEMBERS_PLACEHOLDER!!*/", fUObjectItemStr);

            // Write File
            CopyToSdk(Main.SdkPath, fileStr);
        }
    }

    public class UftCpp : UtfLang
    {
        public enum FileContentType
        {
            Structs,
            Classes,
            Functions,
            FunctionParameters
        };
        public string GetFileHeader(List<string> pragmas, List<string> includes, bool isHeaderFile)
        {
            var genInfo = Main.GenInfo;
            var sb = new StringBuilder();

            // Pragmas
            if (isHeaderFile)
            {
                sb.Append("#pragma once\n");
                if (pragmas.Count > 0)
                    foreach (string i in pragmas) { sb.Append("#pragma " + i + "\n"); }
                sb.Append("\n");
            }

            if (genInfo.IsExternal)
                sb.Append("#include \"../Memory.h\"\n");

            // Includes
            if (includes.Count > 0)
                foreach (string i in includes) { sb.Append("#include " + i + "\n"); }
            sb.Append("\n");

            // 
            sb.Append($"// Name: {genInfo.GameName}, Version: {genInfo.GameVersion}\n\n");
            sb.Append($"#ifdef _MSC_VER\n\t#pragma pack(push, 0x{genInfo.MemberAlignment:X2})\n#endif\n\n");
            sb.Append($"namespace {genInfo.NamespaceName}\n{{\n");

            return sb.ToString();
        }
        public string GetFileFooter()
        {
            return "}\n\n#ifdef _MSC_VER\n\t#pragma pack(pop)\n#endif\n";
        }
        public string SaveSdkHeader()
        {
            string ret =
                $"// ------------------------------------------------\n" +
                $"// Sdk Generated By ( Unreal Finder Tool By CorrM )\n" +
                $"// ------------------------------------------------\n" +
                $"#pragma once\n\n" +
                $"// Name: {Main.GenInfo.GameName}, Version: {Main.GenInfo.GameVersion}\n\n" +
                $"#include <set>\n" +
                $"#include <string>\n";

            return ret;
        }

        public string GetSectionHeader(string name)
        {
            return 
                $"//---------------------------------------------------------------------------\n" +
                $"// {name}\n" +
                $"//---------------------------------------------------------------------------\n\n";
        }
        public string GenerateFileName(FileContentType type, string packageName)
        {
            switch (type)
            {
                case FileContentType.Structs:
                    return $"{packageName}_structs.h";
                case FileContentType.Classes:
                    return $"{packageName}_classes.h";
                case FileContentType.Functions:
                    return $"{packageName}_functions.cpp";
                case FileContentType.FunctionParameters:
                    return $"{packageName}_parameters.h";
                default:
                    throw new Exception("WHAT IS THIS TYPE .?!!");
            }
        }
        public void PrintConstant(string fileName, KeyValuePair<string, string> c)
        {
            IncludeFile.AppendToSdk(Main.SdkPath, fileName, $"#define CONST_{c.Key,-50} {c.Value}\n");
        }
        public void PrintEnum(string fileName, Native.Enum e)
        {
            string text = $"// {e.FullName.Str}\nenum class {e.Name.Str} : uint8_t\n{{\n";

            IncludeFile.AppendToSdk(Main.SdkPath, fileName, text);
        }

        #region SavePackage
        public void SaveStructs(string fileName)
        {

        }
        #endregion

        public void Init()
        {
            new BasicHeader().Init(this);
        }
    }
}
